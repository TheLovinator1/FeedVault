# Generated by Django 5.0.1 on 2024-01-30 01:03

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Author',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.TextField(blank=True, help_text='The name of the feed author.')),
                ('email', models.EmailField(blank=True, help_text='The email address of the feed author.', max_length=254)),
                ('href', models.URLField(blank=True, help_text="The URL of the feed author. This can be the author's home page, or a contact page with a webmail form.")),
            ],
            options={
                'verbose_name': 'Feed author',
                'verbose_name_plural': 'Feed authors',
                'db_table_comment': 'Details about the author of a feed.',
            },
        ),
        migrations.CreateModel(
            name='Cloud',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('domain', models.CharField(blank=True, help_text='The domain of the cloud. Should be just the domain name, not including the http:// protocol. All clouds are presumed to operate over HTTP. The cloud specification does not support secure clouds over HTTPS, nor can clouds operate over other protocols.', max_length=255)),
                ('port', models.CharField(blank=True, help_text='The port of the cloud. Should be an integer, but Universal Feed Parser currently returns it as a string.', max_length=255)),
                ('path', models.CharField(blank=True, help_text='The URL path of the cloud.', max_length=255)),
                ('register_procedure', models.CharField(blank=True, help_text='The name of the procedure to call on the cloud.', max_length=255)),
                ('protocol', models.CharField(blank=True, help_text='The protocol of the cloud. Documentation differs on what the acceptable values are. Acceptable values definitely include xml-rpc and soap, although only in lowercase, despite both being acronyms. There is no way for a publisher to specify the version number of the protocol to use. soap refers to SOAP 1.1; the cloud interface does not support SOAP 1.0 or 1.2. post or http-post might also be acceptable values; nobody really knows for sure.', max_length=255)),
            ],
            options={
                'verbose_name': 'Feed cloud',
                'verbose_name_plural': 'Feed clouds',
                'db_table_comment': 'No one really knows what a cloud is.',
            },
        ),
        migrations.CreateModel(
            name='Contributor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.TextField(blank=True, help_text='The name of this contributor.')),
                ('email', models.EmailField(blank=True, help_text='The email address of this contributor.', max_length=254)),
                ('href', models.URLField(blank=True, help_text="The URL of this contributor. This can be the contributor's home page, or a contact page with a webmail form.")),
            ],
            options={
                'verbose_name': 'Feed contributor',
                'verbose_name_plural': 'Feed contributors',
                'db_table_comment': 'Details about the contributor to a feed.',
            },
        ),
        migrations.CreateModel(
            name='Generator',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.TextField(blank=True, help_text='Human-readable name of the application used to generate the feed.')),
                ('href', models.URLField(blank=True, help_text='The URL of the application used to generate the feed.')),
                ('version', models.CharField(blank=True, help_text='The version number of the application used to generate the feed. There is no required format for this, but most applications use a MAJOR.MINOR version number.', max_length=255)),
            ],
            options={
                'verbose_name': 'Feed generator',
                'verbose_name_plural': 'Feed generators',
                'db_table_comment': 'Details about the software used to generate the feed.',
            },
        ),
        migrations.CreateModel(
            name='Image',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('title', models.TextField(blank=True, help_text='The alternate text of the feed image, which would go in the alt attribute if you rendered the feed image as an HTML img element.')),
                ('href', models.URLField(blank=True, help_text='The URL of the feed image itself, which would go in the src attribute if you rendered the feed image as an HTML img element.')),
                ('link', models.URLField(blank=True, help_text='The URL which the feed image would point to. If you rendered the feed image as an HTML img element, you would wrap it in an a element and put this in the href attribute.')),
                ('width', models.IntegerField(default=0, help_text='The width of the feed image, which would go in the width attribute if you rendered the feed image as an HTML img element.')),
                ('height', models.IntegerField(default=0, help_text='The height of the feed image, which would go in the height attribute if you rendered the feed image as an HTML img element.')),
                ('description', models.TextField(blank=True, help_text='A short description of the feed image, which would go in the title attribute if you rendered the feed image as an HTML img element. This element is rare; it was available in Netscape RSS 0.91 but was dropped from Userland RSS 0.91.')),
            ],
            options={
                'verbose_name': 'Feed image',
                'verbose_name_plural': 'Feed images',
                'db_table_comment': 'A feed image can be a logo, banner, or a picture of the author.',
            },
        ),
        migrations.CreateModel(
            name='Info',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('value', models.TextField(blank=True, help_text='Free-form human-readable description of the feed format itself. Intended for people who view the feed in a browser, to explain what they just clicked on.')),
                ('info_type', models.CharField(blank=True, help_text='The content type of the feed info. Most likely text/plain, text/html, or application/xhtml+xml.', max_length=255)),
                ('language', models.CharField(blank=True, help_text='The language of the feed info.', max_length=255)),
                ('base', models.URLField(blank=True, help_text='The original base URI for links within the feed copyright.')),
            ],
            options={
                'verbose_name': 'Feed information',
                'verbose_name_plural': 'Feed information',
                'db_table_comment': 'Details about the feed.',
            },
        ),
        migrations.CreateModel(
            name='Link',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rel', models.CharField(blank=True, help_text='The relationship of this feed link.', max_length=255)),
                ('link_type', models.CharField(blank=True, help_text='The content type of the page that this feed link points to.', max_length=255)),
                ('href', models.URLField(blank=True, help_text='The URL of the page that this feed link points to.')),
                ('title', models.TextField(blank=True, help_text='The title of this feed link.')),
            ],
            options={
                'verbose_name': 'Feed link',
                'verbose_name_plural': 'Feed links',
                'db_table_comment': 'A list of dictionaries with details on the links associated with the feed.',
            },
        ),
        migrations.CreateModel(
            name='Publisher',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.TextField(blank=True, help_text="The name of this feed's publisher.")),
                ('email', models.EmailField(blank=True, help_text="The email address of this feed's publisher.", max_length=254)),
                ('href', models.URLField(blank=True, help_text="The URL of this feed's publisher. This can be the publisher's home page, or a contact page with a webmail form.")),
            ],
            options={
                'verbose_name': 'Feed publisher',
                'verbose_name_plural': 'Feed publishers',
                'db_table_comment': 'Details about the publisher of a feed.',
            },
        ),
        migrations.CreateModel(
            name='Rights',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('value', models.TextField(blank=True, help_text='A human-readable copyright statement for the feed.')),
                ('rights_type', models.CharField(blank=True, help_text='The content type of the feed copyright. Most likely text/plain, text/html, or application/xhtml+xml.', max_length=255)),
                ('language', models.CharField(blank=True, help_text='The language of the feed rights.', max_length=255)),
                ('base', models.URLField(blank=True, help_text='The original base URI for links within the feed copyright.')),
            ],
            options={
                'verbose_name': 'Feed rights',
                'verbose_name_plural': 'Feed rights',
                'db_table_comment': 'Details about the rights of a feed.',
            },
        ),
        migrations.CreateModel(
            name='Subtitle',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.TextField(blank=True, help_text='A subtitle, tagline, slogan, or other short description of the feed.')),
                ('subtitle_type', models.CharField(blank=True, help_text='The content type of the feed subtitle. Most likely text/plain, text/html, or application/xhtml+xml.', max_length=255)),
                ('language', models.CharField(blank=True, help_text='The language of the feed subtitle.', max_length=255)),
                ('base', models.URLField(blank=True, help_text='The original base URI for links within the feed subtitle.')),
            ],
            options={
                'verbose_name': 'Feed subtitle',
                'verbose_name_plural': 'Feed subtitles',
                'db_table_comment': 'A subtitle, tagline, slogan, or other short description of the feed.',
            },
        ),
        migrations.CreateModel(
            name='Tags',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('term', models.TextField(blank=True, help_text='The category term (keyword).')),
                ('scheme', models.CharField(blank=True, help_text='The category scheme (domain).', max_length=255)),
                ('label', models.TextField(blank=True, help_text='A human-readable label for the category.')),
            ],
            options={
                'verbose_name': 'Feed tag',
                'verbose_name_plural': 'Feed tags',
                'db_table_comment': 'A list of tags associated with the feed.',
            },
        ),
        migrations.CreateModel(
            name='TextInput',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.TextField(blank=True, help_text="The title of the text input form, which would go in the value attribute of the form's submit button.")),
                ('link', models.URLField(blank=True, help_text='The link of the script which processes the text input form, which would go in the action attribute of the form.')),
                ('name', models.TextField(blank=True, help_text="The name of the text input box in the form, which would go in the name attribute of the form's input box.")),
                ('description', models.TextField(blank=True, help_text='A short description of the text input form, which would go in the label element of the form.')),
            ],
            options={
                'verbose_name': 'Feed text input',
                'verbose_name_plural': 'Feed text inputs',
                'db_table_comment': 'A text input form. No one actually uses this. Why are you?',
            },
        ),
        migrations.CreateModel(
            name='Title',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.TextField(blank=True, help_text='The title of the feed.')),
                ('title_type', models.CharField(blank=True, help_text='The content type of the feed title. Most likely text/plain, text/html, or application/xhtml+xml.', max_length=255)),
                ('language', models.CharField(blank=True, help_text='The language of the feed title.', max_length=255)),
                ('base', models.URLField(blank=True, help_text='The original base URI for links within the feed title.')),
            ],
            options={
                'verbose_name': 'Feed title',
                'verbose_name_plural': 'Feed titles',
                'db_table_comment': 'Details about the title of a feed.',
            },
        ),
        migrations.CreateModel(
            name='Feed',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url', models.URLField(help_text='The feed URL.', unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('error', models.BooleanField(default=False)),
                ('error_message', models.TextField(default='')),
                ('error_at', models.DateTimeField(null=True)),
                ('bozo', models.BooleanField(default=False, help_text='Is the feed well-formed XML?')),
                ('bozo_exception', models.TextField(default='', help_text='The exception raised when attempting to parse a non-well-formed feed.')),
                ('encoding', models.CharField(default='', help_text='The character encoding that was used to parse the feed.', max_length=255)),
                ('etag', models.CharField(default='', help_text='The ETag of the feed, as specified in the HTTP headers.', max_length=255)),
                ('headers', models.TextField(default='', help_text='HTTP headers received from the web server when retrieving the feed.')),
                ('href', models.URLField(default='', help_text='The final URL of the feed that was parsed. If the feed was redirected from the original requested address, href will contain the final (redirected) address.')),
                ('last_modified', models.DateTimeField(help_text='The last-modified date of the feed, as specified in the HTTP headers.', null=True)),
                ('namespaces', models.TextField(default='', help_text='A dictionary of all XML namespaces defined in the feed, as {prefix: namespaceURI}.')),
                ('http_status_code', models.IntegerField(default=0, help_text='The HTTP status code that was returned by the web server when the feed was fetched.')),
                ('version', models.CharField(choices=[('atom', 'Atom (unknown or unrecognized version)'), ('atom01', 'Atom 0.1'), ('atom02', 'Atom 0.2'), ('atom03', 'Atom 0.3'), ('atom10', 'Atom 1.0'), ('cdf', 'CDF'), ('rss', 'RSS (unknown or unrecognized version)'), ('rss090', 'RSS 0.90'), ('rss091n', 'Netscape RSS 0.91'), ('rss091u', 'Userland RSS 0.91'), ('rss092', 'RSS 0.92'), ('rss093', 'RSS 0.93'), ('rss094', 'RSS 0.94 (no accurate specification is known to exist)'), ('rss10', 'RSS 1.0'), ('rss20', 'RSS 2.0')], default='', help_text='The version of the feed, as determined by Universal Feed Parser.', max_length=255)),
                ('feed_data', models.TextField(default='', help_text='A dictionary of data about the feed.')),
                ('docs', models.URLField(blank=True, help_text='A URL pointing to the specification which this feed conforms to.')),
                ('error_reports_to', models.EmailField(blank=True, help_text='An email address for reporting errors in the feed itself.', max_length=254)),
                ('feed_id', models.CharField(blank=True, help_text='A globally unique identifier for this feed.', max_length=255)),
                ('language', models.CharField(blank=True, help_text='The primary language of the feed.', max_length=255)),
                ('license', models.URLField(blank=True, help_text='A URL pointing to the license of the feed.')),
                ('logo', models.URLField(blank=True, help_text='A URL to a graphic representing a logo for the feed.')),
                ('published', models.CharField(blank=True, help_text='The date the feed was published, as a string in the same format as it was published in the original feed.', max_length=255)),
                ('published_parsed', models.DateTimeField(help_text='The date the feed was published.', null=True)),
                ('ttl', models.CharField(blank=True, help_text='According to the RSS specification, “None"', max_length=255)),
                ('updated', models.CharField(blank=True, help_text='The date the feed was last updated, as a string in the same format as it was published in the original feed.', max_length=255)),
                ('updated_parsed', models.DateTimeField(help_text='The date the feed was last updated.', null=True)),
                ('author', models.ForeignKey(help_text='The author of the feed.', null=True, on_delete=django.db.models.deletion.CASCADE, to='feeds.author')),
                ('cloud', models.ForeignKey(help_text='Cloud enables realtime push notifications or distributed publish/subscribe communication for feeds.', null=True, on_delete=django.db.models.deletion.CASCADE, to='feeds.cloud')),
                ('contributors', models.ManyToManyField(help_text='A list of contributors (secondary authors) to this feed.', to='feeds.contributor')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('generator', models.ForeignKey(help_text='Details about the software used to generate the feed.', null=True, on_delete=django.db.models.deletion.CASCADE, to='feeds.generator')),
                ('image', models.ForeignKey(help_text='A feed image can be a logo, banner, or a picture of the author.', null=True, on_delete=django.db.models.deletion.CASCADE, to='feeds.image')),
                ('info', models.ForeignKey(help_text='Details about the feed.', null=True, on_delete=django.db.models.deletion.CASCADE, to='feeds.info')),
                ('link', models.ForeignKey(help_text='A list of dictionaries with details on the links associated with the feed.', null=True, on_delete=django.db.models.deletion.CASCADE, to='feeds.link')),
                ('publisher', models.ForeignKey(help_text='The publisher of the feed.', null=True, on_delete=django.db.models.deletion.CASCADE, to='feeds.publisher')),
                ('rights', models.ForeignKey(help_text='Details about the rights of a feed.', null=True, on_delete=django.db.models.deletion.CASCADE, to='feeds.rights')),
                ('subtitle', models.ForeignKey(help_text='A subtitle, tagline, slogan, or other short description of the feed.', null=True, on_delete=django.db.models.deletion.CASCADE, to='feeds.subtitle')),
                ('tags', models.ManyToManyField(help_text='A list of tags associated with the feed.', to='feeds.tags')),
                ('text_input', models.ForeignKey(help_text='A text input form. No one actually uses this. Why are you?', null=True, on_delete=django.db.models.deletion.CASCADE, to='feeds.textinput')),
                ('title', models.ForeignKey(help_text='Details about the title of a feed.', null=True, on_delete=django.db.models.deletion.CASCADE, to='feeds.title')),
            ],
            options={
                'verbose_name': 'Feed',
                'verbose_name_plural': 'Feeds',
                'db_table_comment': 'A feed. This is the main model of the app.',
            },
        ),
    ]
